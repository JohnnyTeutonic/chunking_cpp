#!/bin/bash
# Default settings
#PREFIX=/usr/local
PREFIX=$(pwd)
echo "PREFIX: $PREFIX"
BUILD_TYPE=Release
ENABLE_TESTS=0
ENABLE_DOCS=0
ENABLE_COVERAGE=0
ENABLE_SANITIZERS=0
# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
# Print help message
print_help() {
    echo "Configure script for Advanced Chunk Processing Library"
    echo
    echo "Usage: ./configure [options]"
    echo
    echo "Options:"
    echo "  --prefix=PATH        Installation prefix [$PREFIX]"
    echo "  --build-type=TYPE    Build type (Debug|Release) [$BUILD_TYPE]"
    echo "  --enable-tests      Enable building tests"
    echo "  --enable-docs       Enable building documentation"
    echo "  --enable-coverage   Enable code coverage reporting"
    echo "  --enable-sanitizers Enable address and undefined behavior sanitizers"
    echo "  --help              Display this help message"
    echo
}

# Parse command line arguments
for arg in "$@"; do
    case "$arg" in
        --prefix=*)
            PREFIX="${arg#*=}"
            ;;
        --build-type=*)
            BUILD_TYPE="${arg#*=}"
            ;;
        --enable-tests)
            ENABLE_TESTS=1
            ;;
        --enable-docs)
            ENABLE_DOCS=1
            ;;
        --enable-coverage)
            ENABLE_COVERAGE=1
            ;;
        --enable-sanitizers)
            ENABLE_SANITIZERS=1
            ;;
        --help)
            print_help
            exit 0
            ;;
        *)
            echo "Unknown option: $arg"
            print_help
            exit 1
            ;;
    esac
done

# Check for required programs
check_program() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "${RED}Error: $1 not found${NC}"
        echo "Please install $1 and try again"
        exit 1
    fi
    echo -e "${GREEN}Found $1:${NC} $(command -v "$1")"
}

echo "Checking for required programs..."
check_program g++
check_program make

# Check C++ compiler version
CXX_VERSION=$(g++ --version | head -n1)
echo -e "${GREEN}C++ compiler version:${NC} $CXX_VERSION"

# Check for optional dependencies
if [ $ENABLE_TESTS -eq 1 ]; then
    echo "Checking for testing dependencies..."
    if ! dpkg -l | grep -q libgtest-dev; then
        echo -e "${YELLOW}Warning: Google Test not found${NC}"
        echo "Installing Google Test..."
        sudo apt-get install -y libgtest-dev
        cd /usr/src/gtest
        sudo cmake CMakeLists.txt
        sudo make
        sudo cp lib/*.a /usr/lib
        cd -
    else
        echo -e "${GREEN}Found Google Test${NC}"
    fi
fi

if [ $ENABLE_DOCS -eq 1 ]; then
    echo "Checking for documentation dependencies..."
    check_program doxygen
    check_program dot
fi

# Create config.mk
echo "Creating config.mk..."
cat > config.mk << EOF
# Generated by configure script - do not edit

PREFIX = $PREFIX
BUILD_TYPE = $BUILD_TYPE
ENABLE_TESTS = $ENABLE_TESTS
ENABLE_DOCS = $ENABLE_DOCS
ENABLE_COVERAGE = $ENABLE_COVERAGE
ENABLE_SANITIZERS = $ENABLE_SANITIZERS

# Compiler flags
ifeq (\$(BUILD_TYPE),Debug)
    CXXFLAGS += -g -O0 -DDEBUG
else
    CXXFLAGS += -O2 -DNDEBUG
endif

# Coverage flags
ifeq (\$(ENABLE_COVERAGE),1)
    CXXFLAGS += --coverage -fprofile-arcs -ftest-coverage
    LDFLAGS += --coverage
endif

# Sanitizer flags
ifeq (\$(ENABLE_SANITIZERS),1)
    CXXFLAGS += -fsanitize=address,undefined -fno-omit-frame-pointer
    LDFLAGS += -fsanitize=address,undefined
endif

# Installation paths
bindir = \$(PREFIX)/bin
libdir = \$(PREFIX)/lib
includedir = \$(PREFIX)/include
docdir = \$(PREFIX)/share/doc/chunker

# Dependencies
HAVE_GTEST = $ENABLE_TESTS
HAVE_DOXYGEN = $ENABLE_DOCS

# Additional include paths
ifeq ($(OS),Windows_NT)
    EXTRA_INCLUDES = -I$(VCPKG_ROOT)/installed/x64-windows/include
else
    EXTRA_INCLUDES = -I/usr/include/gtest -I/usr/local/include/gtest
endif

CXXFLAGS += $(EXTRA_INCLUDES)
EOF

# Create build directory
echo "Creating build directory..."
mkdir -p build

echo -e "\n${GREEN}Configuration complete!${NC}"
echo
echo "Build settings:"
echo "  Prefix:      $PREFIX"
echo "  Build type:  $BUILD_TYPE"
echo "  Tests:       $([ $ENABLE_TESTS -eq 1 ] && echo "enabled" || echo "disabled")"
echo "  Docs:        $([ $ENABLE_DOCS -eq 1 ] && echo "enabled" || echo "disabled")"
echo "  Coverage:    $([ $ENABLE_COVERAGE -eq 1 ] && echo "enabled" || echo "disabled")"
echo "  Sanitizers:  $([ $ENABLE_SANITIZERS -eq 1 ] && echo "enabled" || echo "disabled")"
echo
echo "To build the project, run:"
echo "  make"
echo
echo "To execute the project, run:"
echo "  make run"

# Parse arguments
COVERAGE=0
SANITIZERS=0

for arg in "$@"; do
    case $arg in
        --enable-coverage)
            COVERAGE=1
            shift
            ;;
        --enable-sanitizers)
            SANITIZERS=1
            shift
            ;;
    esac
done

# Base CMake command
CMAKE_ARGS="-DCMAKE_BUILD_TYPE=$BUILD_TYPE"

# Add coverage if enabled
if [ $COVERAGE -eq 1 ]; then
    CMAKE_ARGS="$CMAKE_ARGS -DENABLE_COVERAGE=ON"
fi

# Add sanitizers if enabled
if [ $SANITIZERS -eq 1 ]; then
    CMAKE_ARGS="$CMAKE_ARGS -DENABLE_SANITIZERS=ON"
fi

# Run CMake
cmake $CMAKE_ARGS .

cd ..